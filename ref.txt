
Environment-setup 
--------------------
    1. java 11 
        > java -version 

    2. eclipse or STS 

    3. mysql community server & mysql workbench 

    4. docker 
        > docker --version 

    5. nodejs
        > node -v 
        > npm -v 

    6. mongodb community edition 
            -> create below folders in C: 
                    c:\data\db 
            -> set env variable for mongodb 

            > mongod 


    Spring 
        - core, mvc, rest, data, cloud, security, boot 
        
    Microservices 
        - config server, service discovery/registry / naming server, api gateway, load balancing, 
                - service to service communication 

    Cloud / DevOps / docker 
        - AWS EC2, deploy java application 
        - CI / CD 
        - automate deployment 
        - version controlled 

    FrontEnd    
        - angular, react 



    Session1        - raise new topics, discussions, demontrations 

    Session2       - demontrations 

    session3        - self study / recall the topics / read / explore / learn from other resources 

    Session4        - practicals / hands-on / solve assignments / ask questions 




    Language                        library                         framework 

    Java                            standard libraries              spring 
                                    i.e. util, io, jdbc, etc.
                                    3rd party libraries 

    
    JavaScript                      jquery                          angular 

    Python                          ---                             ?

    C#/VB                           ----                            .net framework 

    Go                              -----                           ?

       |                            |                               |
    programming                 simplifies the tasks            standardize the process 
    capabilities 


    Spring
    -------------
        - what is spring framework ? 
            - application framework 

            - core, mvc, org, data etc. 


        - lightweight and loosely coupled?

        - spring modules / products ?

                - core 
                    - has thee implementation of IOC and supports dependency injection 
                    - responsible for maintaining object's life cycle 
                    - beans, core, context, spEL

                - web 
                    - web, servlet, websocket, porlet

                - data access / integration 
                    - jdbc, orm, oxm, jms, transactions

                - aop 

                - messaging  

                - test


        - IOC ? inversion of control
            -  it is principle that delegates the responsibility of
                 managing objects (?) or portions of programs to a "Container"

        - container ?
            - it is responsible to manage the life cycle of objects 
            - spring framework provides an interface called "ApplicationContext" which represents the IOC container 
                - there are many implementations of ApplicationContext 
                            - ClassPathXmlApplicationContext 
                            - FileSystemXmlApplicationContext  
                            - AnnotationConfigApplicationContext
                            - AnnotationConfigWebApplicationContext


        - spring beans ?
            - objects which are managed by the container 

        - ways to define beans in spring ? 

                1. using xml 

                        <bean id="" class="" .... .. .. ... ... />

                        <bean id="" class="">  
                            <property name=""><value>xxxx</value></property>
                            <property name="" value="" />
                        </bean> 

                        <bean id="" class="">  
                            <constructor-arg name="" value="" />
                        </bean> 

                        new ClassPathXmlApplicationContext("spring-beans.xml")

                2. using java 

                        @Configuration 
                        public class MyConfiguration {

                                @Bean 
                                public Employee createEmp(){
                                    //...
                                }
                        }

                3. annotation based configuration 

        Life Cycle methods
        ---------------------

                public void init() 
                    - write any initilization code i.e. loading some config, connecting to db, validation

                pbulic void destroy()
                        - write cleanup code 


                1. using xml 
                    <bean id="employee" class="demo1.Employee" init-method="init" destroy-method="destroy">
                        <property name="name" value="vishaal"/>
                    </bean>


                2. using java 
                    public class Employee implements InitializingBean, DisposableBean {

                            	public void afterPropertiesSet() throws Exception {
                                    // TODO Auto-generated method stub
                                    System.out.println("this is the place for initilization/validation/etc");
                                }

                                public void destroy() throws Exception {
                                    // TODO Auto-generated method stub
                                    System.out.println("releasing resources using destroy method ");
                                } 
                    }

                3. using annotation 



        Dependency Check 

        Bean Scopes 
            - using xml 
            - using @Scope 

        constructor injection 

        setter injection 

        @Value 

        auto wiring 

        @Qualifier 




        JDBC 
        -----------
            - robust, low level api
            - it takes several lines of code just to bind an object to sql query 
            - sql is not java / object oriented 
            - sql is not very easy to refactor 
            - hard to read / maintain 

            - in java, we deal with objects i.e. employee, book, product 



        ORM Frameworks
        -----------------
            - map java objects to relational tables 

                 Hibernate 
                 TopLink 
                 IBatis 
        JPA 
        ------------
            - java persistence api 
            - specifies standards for mapping objects to relational databases 
            - bridges gap between objects and rdbms 
            - relational mapping is made through metadata
            - it has an EntityManager api to perform db related operations 
            - JPA also specifies JPQL to retrieve data 
            - IT also has transaction mechanism 


        JPA Providers 
        ---------------
            - Hibernate JPA 
                - ORM framwork which implements JPA standards 

            - EclipseLink
            - MyBatis 



        JPA BASICS 
        --------------

            Entity
            ---------
                -  objects managed by EntityManager
                - when talking about mapping objects to a relational database, persisting objects, retrieving objects, 
                        the term 'Entity' is used 
                - Entities are mapped with relational tables 

                @Entity
                public class Employee {
                    
                    @Id 
                    private int id; 

                    public Employee(){

                    }

                    //getter/setter methods 
                }


            EntityManager 
            -----------
                - EntityManager is responsible to persist data in to the db 
                - it manages the state and lifecycle of entities, using JPQL it retrieves the entities 


            Persistentce Context 
            ----------------------
                - configuration for set of managed entities 

                - persistence.xml 
                    <persistence>
                            <persistence-unit name="pu1">

                            </persistence-unit>

                    </persistence>

            - persistent unit standard properites 
            -----------------------------------------

            <properties>
				<property name="javax.persistence.jdbc.driver" value="com.mysql.cj.jdbc.Driver"/>
				<property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/mydb"/>
				<property name="javax.persistence.jdbc.user" value="root"/>
				<property name="javax.persistence.jdbc.password" value="suhroot123"/>
			</properties>


            CRUD 

            Default Mapping 

            Custom Mapping 

            Relationals / Inheritance 

            Query / Retrieve data 
            ---------------------------
                - using predefined methods in CrudRepository    
                        i.e. findById() findAll() 

                - using Example interface (JpaRepository)

                - using custom queries 
                    - @Query  annotation with JPQL statement 
                    - @Query  annotation with native SQL statement 

                - using named queries 

                - using query generation methods 

                      List<Employee>  findAllByCity(String city)

                - Criteria API 
                    - Criteria API offers a programmatic way to create typed queries,

                - QueryDSL 
                    - Querydsl is an extensive Java framework, which helps with creating and running type-safe queries in a domain specific language that is similar to SQL
                    - the querydsl-apt will create an autogenerated class called  "QType" automatically 
                        for each entity in our app and those auto generated classes will be stored 
                        in a directory "target/generated-sources"

                        "The JPAAnnotationProcessor will find domain types annotated with javax.persistence.Entity annotation and generates query types for them"
                        



        Spring Data JPA 
        -----------------
            - wrapper around jpa & jpa providers
            - offers easy integration with db and provides boilerplate code 

                - Spring Data JPA offers repository pattern
                - supports pagination, dynamic query execution, validation etc.  

                - transactions 

                - caching 


                interface Repository<T,ID>
                        |--> this is just a marker interface 
                        |
                interface CrudRepository<T,ID> 
                        |
                        |-->long	count()
                        |--> <S extends T> S	save(S entity)
                        |-->Iterable<T>	findAll()
                        |-->Optional<T>	findById(ID id)
                        |-->void	delete(T entity)
                        |--> .....
                        |
                        |
                interface PagingAndSortingRepository<T, ID>
                        |
                        |
                        |-->Page<T>	findAll(Pageable pageable)
                        |-->Iterable<T>	findAll(Sort sort)
                        |
                        |
                        |
                interface JpaRepository<T, ID> 
                        |
                        |
                        |
                        |
                        


                **Pageable 
                        




            - QueryDSL
                    <dependency>
                        <groupId>com.querydsl</groupId>
                        <artifactId>querydsl-apt</artifactId>
                        <version>4.2.1</version>
                        <scope>provided</scope>
                    </dependency>

                    <!-- https://mvnrepository.com/artifact/com.querydsl/querydsl-jpa -->
                    <dependency>
                        <groupId>com.querydsl</groupId>
                        <artifactId>querydsl-jpa</artifactId>
                        <version>4.2.1</version>
                    </dependency>

            <plugin>
				<groupId>com.mysema.maven</groupId>
				<artifactId>apt-maven-plugin</artifactId>
				<version>1.1.3</version>
				<executions>
					<execution>
						<goals>
							<goal>process</goal>
						</goals>
						<configuration>
							<outputDirectory>target/generated-sources</outputDirectory>
							<processor>com.querydsl.apt.jpa.JPAAnnotationProcessor</processor>
						</configuration>
					</execution>
				</executions>
			</plugin>



            class EmployeeDAO {

                    private EntityManager manager;

                    EmployeeDAO(){
                        //create object of EntityManager
                    }

                    public Employee save(Employee emp){
                        //start tx 
                        manager.persist(emp);
                        //commit x
                    }

                    //..
            }





            with spring data jpa all you need to do is.. create a repository like below...

            interface EmployeeRepository extends JpaRepository<Employee, Integer>{

            }

            - spring data jpa will automatically provide a "proxy instance" implementing the 
                above interface 



        Relationships  / Association 
        -----------------


                @OneToOne                   <<--join column  
                @ManyToOne                  <<--join column      

                @OneToMany                   <<-Join table              LAZY
                @ManyToMany                  <<-Join table              LAZY


            1. identify and configure the association between two entities using appropriate annotations  
                    - consider / determine the direction & cartidinality 
S

            2. understand / observe how these association are represented in database 

            3. define appropriate casecase event and fetch policy when the entities are associated with each other 

                    cascade events 
                            PERSIST 
                            REMOVE 
                            MERGE 
                            DETACH
                            ALL 
S
                    fetch policies 
                        EAGER 
                        LAZY 



            4. perform db operations 





            @OneToMany 
            -----------------

                    class Customer {                        class Address {

                        int id;                                 int id;
                        string name;                            string street, 
                        int age;                                string city 

                        @OneToMany                              @ManyToOne
                        Set<Address> addresses;                 Customer customer;
                    }                                       }


                    customer                                address
                    -------------                           ---------------                     (FK)
                    id   name   age                         id      street      city        customer_id
                    1    sss    33                          101     sldkfj      lsdkfjds    1
                                                            102     sldfkjsdlkj sldfs       1

                    customer_address
                    --------------------
                    customer_id         address_id
                    1                   101 
                    1                   102



            EHCache 
            ==========
                - caching framework for java 
                - cache provider 
                - supports in memory cache or disk based cache 
                - configure timeout, TTL



    Web Services 
    ---------------
        - a service which is delivered on the web is called as 'Service' 
        - designed for machine to machine (or app to app ) interaction 
        - should be interoperable - not platform dependent 
        - should allow communication on the network 
        - data exchange between applications 


                        req
        ApplicationA --------------> Web Service 
                     <----------------
                            res 
    Terminologies 
    -----------------
        - Request and Response 
            - types of HTTP requests 
            - structure of REquest 

        - Message exchange format 
            - xml, json, text 
    
        - Service provider or server 

        - Service Consumer or client 

        - Service definition 

        - Transport 
            - HTTP
            - MQ 

        - SOAP (Simple object access protocol) services and REST (represetational state transfer ) Services 


        RESTFul Web Services 
        ----------------------


        Monolith 
        -----------

        Microservices 
        ---------------
            - architectural style / approach for developing application 
            - many small services that work together 
            - services may be written in any programming language i.e .java, python, javascript, ruby etc. 

        Spring Cloud 
        --------------
            - spring cloud config server 
            - spring cloud eureka 
            - spring cloud api server 
            - ..
            - ..


        Docker 
        ----------
            - tool for containerization 

        Docker image 
            - self executable package that contains your application code, runtime, libraries etc. 

        container repository 
            - docker hub <<--- public registry 
            - private registry 
                - private git 
                - AWS - ECR 
                - GCP - container registry 
                - Azure - ? 

        Container 
            - it is an instance of a docker image 
            - when you run a docker image it is called container 

        Kubernetes 

        Fully Managed Kubernetes services 
            i.e. AWS = ECS / EKS, GCP = GKE, Azure = AKE 


        Cloud Computing 
        --------------------
            - AWS, GCP, Azure, etc offer IT Services related to compute, storage, database, networking, security etc. 

        AWS Console account (free tier)

        AWS EC2 
            - Elastic Compute Cloud 
            1. choose AMI - amazon machine image        
            2. Choose Instance Type - combination of vCPU and RAM
            3. Configure Instance - specify number of instances, vpc, subnet, userdata scripts, etc.
            4. Add Storage
            5. Add Tags
            6. Configure Security Group - specify firewall rules to allow communication on certain port from certain source 



        - Connect to the VM / EC2 instance and install java runtime         

            > sudo su 
            > yum update -y 
            > amazon-linux-extras install java-openjdk11 -y
            > amazon-linux-extras install tomcat8.5 -y

            > cd /usr/share/tomcat/webapps
            > mkdir ROOT
            > cd ROOT/
            > echo "Helloworld..this is test" > index.html



           > service tomcat status
           > service tomcat start
           > service tomcat stop 


        AWS Code Commit 

        AWS Code Build 

        AWS Code Deploy 
        -----------------
            1. create a role for code deploy service to allow few operations on our befalf 

            2. create a role for EC2 instance allowing operations on S3 bucket  
                    -- attach this role to EC2 instance while launching or if already exist 

            3. Ensure below things are installed in your  EC2 Instance 
                    - jre11 
                    - tomcat
                    - codedeploy-agent

            https://docs.aws.amazon.com/codedeploy/latest/userguide/codedeploy-agent-operations-install-linux.html
            wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install




        AWS Code Pipeline 

        https://656432174106.signin.aws.amazon.com/console